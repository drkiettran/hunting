# docker-compose.yml - Complete deployment configuration
version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: persistent-hunt-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: persistent_hunt_system
      MYSQL_USER: huntuser
      MYSQL_PASSWORD: huntpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: persistent-hunt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: persistent-hunt-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hunt-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: persistent-hunt-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (for analytics platform)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: persistent-hunt-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-management-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  threat-intel-service:
    build:
      context: ./threat-intelligence-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-threat-intel
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  analytics-service:
    build:
      context: ./detection-analytics-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-analytics
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PLATFORMS_ELASTIC_HOST=http://elasticsearch:9200
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - hunt-network

  alert-service:
    build:
      context: ./alert-management-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-alerts
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  investigation-service:
    build:
      context: ./investigation-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-investigations
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    container_name: persistent-hunt-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      - gateway-service
    networks:
      - hunt-network

networks:
  hunt-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:

---

# Dockerfile for Spring Boot services (place in each service directory)
# Example: user-management-service/Dockerfile
FROM openjdk:17-jdk-slim

LABEL maintainer="Persistent Hunt Team"

VOLUME /tmp

# Add the application's jar to the container
COPY target/*.jar app.jar

# Add wait-for-it script for service dependencies
COPY wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Expose the port
EXPOSE 8081

# Run the jar file
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

---

# Dockerfile for React frontend
# web-frontend/Dockerfile
# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy custom nginx config
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built app
COPY --from=build /app/build /usr/share/nginx/html

# Expose port
EXPOSE 3000

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

---

# nginx.conf for React frontend
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen 3000;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Handle client-side routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # API proxy to gateway
        location /api/ {
            proxy_pass http://gateway-service:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket support for real-time features
        location /ws/ {
            proxy_pass http://alert-service:8084;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}

---

# kubernetes-deployment.yaml - Kubernetes deployment configuration
apiVersion: v1
kind: Namespace
metadata:
  name: persistent-hunt

---
# MySQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: persistent-hunt
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        - name: MYSQL_DATABASE
          value: persistent_hunt_system
        - name: MYSQL_USER
          value: huntuser
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: user-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: persistent-hunt
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: persistent-hunt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: persistent-hunt
spec:
  ports:
  - port: 6379
  selector:
    app: redis

---
# Gateway Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: persistent-hunt
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
    spec:
      containers:
      - name: gateway-service
        image: persistent-hunt/gateway-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_REDIS_HOST
          value: "redis"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: persistent-hunt
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: gateway-service

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: persistent-hunt
type: Opaque
data:
  root-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  user-password: aHVudHBhc3M=   # base64 encoded 'huntpass'

---

# build-and-deploy.sh - Deployment script
#!/bin/bash

# Build all services
echo "Building all microservices..."

# Build common module first
cd common
mvn clean install -DskipTests
cd ..

# Build all services
services=("gateway-service" "user-management-service" "threat-intelligence-service" "detection-analytics-service" "alert-management-service" "investigation-service" "integration-service" "intelligence-product-service")

for service in "${services[@]}"; do
    echo "Building $service..."
    cd $service
    mvn clean package -DskipTests
    cd ..
done

# Build frontend
echo "Building frontend..."
cd web-frontend
npm install
npm run build
cd ..

# Build Docker images
echo "Building Docker images..."
docker-compose build

# Start the system
echo "Starting Persistent Hunt System..."
docker-compose up -d

# Wait for services to be ready
echo "Waiting for services to start..."
sleep 30

# Check service health
echo "Checking service health..."
curl -f http://localhost:8080/actuator/health
curl -f http://localhost:8081/api/users/health
curl -f http://localhost:8082/api/threat-intelligence/health

echo "Deployment completed! Access the system at http://localhost:3000"

---

# README.md - Complete setup instructions
# Persistent Hunt System

A comprehensive microservices-based cybersecurity threat hunting and incident response platform.

## Architecture Overview

The system consists of the following microservices:

- **Gateway Service** (Port 8080) - API Gateway and authentication
- **User Management Service** (Port 8081) - User authentication and authorization
- **Threat Intelligence Service** (Port 8082) - Threat intelligence management
- **Detection Analytics Service** (Port 8083) - Analytics creation and execution
- **Alert Management Service** (Port 8084) - Alert processing and management
- **Investigation Service** (Port 8085) - Case and investigation workflow
- **Web Frontend** (Port 3000) - React-based user interface

## Technology Stack

- **Backend**: Spring Boot 3.2, Java 17
- **Frontend**: React 18, Tailwind CSS
- **Database**: MySQL 8.0
- **Cache**: Redis 7
- **Messaging**: Apache Kafka
- **Analytics Platform**: Elasticsearch
- **Security**: JWT, Spring Security
- **Containerization**: Docker, Docker Compose
- **Orchestration**: Kubernetes (optional)

## Prerequisites

- Java 17+
- Node.js 18+
- Maven 3.8+
- Docker and Docker Compose
- MySQL 8.0 (if running locally)

## Quick Start

### Using Docker Compose (Recommended)

1. Clone the repository
2. Run the build and deployment script:
   ```bash
   chmod +x build-and-deploy.sh
   ./build-and-deploy.sh
   ```
3. Access the application at http://localhost:3000

### Manual Setup

1. **Start Infrastructure Services**
   ```bash
   docker-compose up mysql redis kafka elasticsearch -d
   ```

2. **Build and Run Services**
   ```bash
   # Build common module
   cd common && mvn clean install
   
   # Build and run each service
   cd ../gateway-service && mvn spring-boot:run
   cd ../user-management-service && mvn spring-boot:run
   # ... repeat for other services
   ```

3. **Start Frontend**
   ```bash
   cd web-frontend
   npm install
   npm start
   ```

## Default Credentials

- **Admin User**: admin / admin123
- **Analyst User**: analyst1 / analyst123
- **MySQL**: root / password

## API Documentation

Each service exposes Swagger documentation at `/swagger-ui.html`:
- Gateway: http://localhost:8080/swagger-ui.html
- User Service: http://localhost:8081/swagger-ui.html
- etc.

## Configuration

### Environment Variables

Key environment variables for configuration:

```bash
# Database
SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/persistent_hunt_system
SPRING_DATASOURCE_USERNAME=huntuser
SPRING_DATASOURCE_PASSWORD=huntpass

# Redis
SPRING_REDIS_HOST=localhost
SPRING_REDIS_PORT=6379

# Kafka
SPRING_KAFKA_BOOTSTRAP_SERVERS=localhost:9092

# JWT
JWT_SECRET=your-secret-key
JWT_EXPIRATION=86400

# Elasticsearch
PLATFORMS_ELASTIC_HOST=http://localhost:9200
PLATFORMS_ELASTIC_USERNAME=elastic
PLATFORMS_ELASTIC_PASSWORD=changeme
```

### Profiles

- `default` - Local development
- `docker` - Docker container deployment
- `kubernetes` - Kubernetes deployment

## Monitoring and Operations

### Health Checks

All services expose health endpoints:
- http://localhost:8080/actuator/health (Gateway)
- http://localhost:8081/api/users/health (User Service)
- etc.

### Metrics

Metrics are available at `/actuator/metrics` for each service.

### Logging

Centralized logging configuration with structured JSON output for production deployments.

## Development

### Adding New Features

1. Update the common module if new shared entities/DTOs are needed
2. Implement the feature in the relevant service
3. Update the frontend components
4. Add appropriate tests
5. Update API documentation

### Database Migrations

Use Flyway for database schema migrations:
- Place migration scripts in `src/main/resources/db/migration/`
- Follow naming convention: `V{version}__{description}.sql`

## Production Deployment

### Kubernetes

1. Apply the Kubernetes manifests:
   ```bash
   kubectl apply -f kubernetes-deployment.yaml
   ```

2. Configure ingress and TLS certificates
3. Set up monitoring with Prometheus and Grafana
4. Configure backup strategies for persistent data

### Security Considerations

- Use strong JWT secrets in production
- Configure proper CORS policies
- Enable SSL/TLS for all communications
- Implement rate limiting
- Use Kubernetes secrets for sensitive data
- Regular security updates

## Troubleshooting

### Common Issues

1. **Service startup failures**: Check database connectivity and Kafka availability
2. **Authentication issues**: Verify JWT configuration and user credentials
3. **Performance issues**: Check Redis cache and database query performance
4. **Frontend errors**: Verify API gateway routing and CORS configuration

### Logs

Check service logs:
```bash
docker-compose logs -f [service-name]
kubectl logs -f deployment/[service-name] -n persistent-hunt
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Implement changes with tests
4. Submit a pull request

## License

This project is licensed under the Apache License 2.0 - see the LICENSE file for details.
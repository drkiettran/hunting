package com.ops.hunting.common.entity;

import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
@ActiveProfiles("test")
class BaseEntityTest {

	private ThreatIntel threatIntel; // Using concrete entity for testing

	@BeforeEach
	void setUp() {
		threatIntel = new ThreatIntel();
		threatIntel.onCreate(); // Manually trigger @PrePersist
	}

	@Test
	@DisplayName("Should create entity with auto-generated ID")
	void shouldCreateEntityWithAutoGeneratedId() {
		assertNotNull(threatIntel.getId());
		assertTrue(threatIntel.getId().toString()
				.matches("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"));
	}

	@Test
	@DisplayName("Should set creation timestamp on creation")
	void shouldSetCreationTimestamp() {
		LocalDateTime before = LocalDateTime.now().minusSeconds(1);
		ThreatIntel entity = new ThreatIntel();
		entity.onCreate();
		LocalDateTime after = LocalDateTime.now().plusSeconds(1);

		assertNotNull(entity.getCreatedAt());
		assertTrue(entity.getCreatedAt().isAfter(before));
		assertTrue(entity.getCreatedAt().isBefore(after));
		assertEquals(entity.getCreatedAt(), entity.getUpdatedAt());
	}

	@Test
	@DisplayName("Should update timestamp when entity is modified")
	void shouldUpdateTimestampWhenModified() throws InterruptedException {
		LocalDateTime originalTimestamp = threatIntel.getUpdatedAt();

		// Small delay to ensure timestamp difference
		Thread.sleep(10);

		// Simulate entity update
		threatIntel.updateTimestamp();

		assertTrue(threatIntel.getUpdatedAt().isAfter(originalTimestamp));
	}

	@Test
	@DisplayName("Should handle equals and hashCode correctly")
	void shouldHandleEqualsAndHashCodeCorrectly() {
		ThreatIntel entity1 = new ThreatIntel();
		entity1.onCreate();

		ThreatIntel entity2 = new ThreatIntel();
		entity2.onCreate();

		// Different entities should not be equal
		assertNotEquals(entity1, entity2);
		assertNotEquals(entity1.hashCode(), entity2.hashCode());

		// Same entity should be equal to itself
		assertEquals(entity1, entity1);
		assertEquals(entity1.hashCode(), entity1.hashCode());
	}

	@Test
	@DisplayName("Should handle version field for optimistic locking")
	void shouldHandleVersionField() {
		assertNull(threatIntel.getVersion()); // Version starts as null

		// Simulate JPA setting version
		threatIntel.setVersion(1L);
		assertEquals(1L, threatIntel.getVersion());
	}
}
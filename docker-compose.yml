# docker-compose.yml - Complete deployment configuration
version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: persistent-hunt-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: persistent_hunt_system
      MYSQL_USER: huntuser
      MYSQL_PASSWORD: huntpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: persistent-hunt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: persistent-hunt-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hunt-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: persistent-hunt-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (for analytics platform)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: persistent-hunt-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-management-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hunt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/users/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  threat-intel-service:
    build:
      context: ./threat-intelligence-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-threat-intel
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  analytics-service:
    build:
      context: ./detection-analytics-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-analytics
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PLATFORMS_ELASTIC_HOST=http://elasticsearch:9200
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - hunt-network

  alert-service:
    build:
      context: ./alert-management-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-alerts
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  investigation-service:
    build:
      context: ./investigation-service
      dockerfile: Dockerfile
    container_name: persistent-hunt-investigations
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/persistent_hunt_system
      - SPRING_DATASOURCE_USERNAME=huntuser
      - SPRING_DATASOURCE_PASSWORD=huntpass
      - SPRING_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hunt-network

  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    container_name: persistent-hunt-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      - gateway-service
    networks:
      - hunt-network

networks:
  hunt-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
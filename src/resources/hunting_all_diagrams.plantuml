@startuml
' !theme plain
' !theme amiga

title Persistent Hunt System - Use Case Diagram

' Define primary actors
actor "Threat Intelligence Source" as TI <<External>>
actor "Tier 1 Analyst" as T1 <<Primary>>
actor "Tier 2 Analyst" as T2 <<Primary>>
actor "Tier 3 Analyst" as T3 <<Primary>>
actor "Production Staff" as Prod <<Primary>>

' Define secondary actors (systems)
actor "Elastic Platform" as ElasticSys <<System>>
actor "Databricks Platform" as DatabricksSys <<System>>
actor "ServiceNow" as SNSys <<System>>
actor "Knowledge Base" as KBSys <<System>>

' System boundary
rectangle "Persistent Hunt System" {
  ' Core use cases
  usecase "Identify New Threats" as UC1
  usecase "Create Detection Analytics" as UC2
  usecase "Monitor & Detect" as UC3
  usecase "Investigate Alerts" as UC4
  usecase "Perform Deep Analysis" as UC5
  usecase "Develop Intelligence Products" as UC6
  usecase "Enhance Detection Capabilities" as UC7
  usecase "Manage Case Workflow" as UC8
  usecase "Archive Knowledge" as UC9
  
  ' Specialized use cases
  usecase "Triage Critical Events" as UC10
  usecase "Coordinate Response" as UC11
}

' Primary actor relationships
TI --> UC1 : reports
T1 --> UC4 : performs
T1 --> UC8 : initiates
T2 --> UC5 : performs
T2 --> UC8 : manages
T2 --> UC9 : contributes
T3 --> UC2 : creates
T3 --> UC7 : enhances
T3 --> UC9 : maintains
Prod --> UC6 : develops
Prod --> UC11 : coordinates

' System actor relationships
ElasticSys --> UC3 : executes
ElasticSys --> UC4 : supports
DatabricksSys --> UC3 : executes
DatabricksSys --> UC5 : supports
SNSys --> UC8 : manages
SNSys --> UC11 : facilitates
KBSys --> UC9 : stores

' Use case relationships
UC1 ..> UC2 : <<triggers>>
UC2 ..> UC3 : <<enables>>
UC3 ..> UC4 : <<generates>>
UC4 ..> UC5 : <<escalates>>
UC4 ..> UC10 : <<includes>>
UC5 ..> UC6 : <<informs>>
UC5 ..> UC7 : <<identifies needs>>
UC8 ..> UC4 : <<coordinates>>
UC8 ..> UC5 : <<coordinates>>
UC8 ..> UC6 : <<coordinates>>

' Extension relationships
UC10 ..> UC8 : <<extends>>
UC11 ..> UC6 : <<extends>>

' Notes for clarification
note right of UC3 : Automated process\nrunning continuously
note right of UC10 : Only for events\nexceeding threshold
note bottom of UC9 : Captures artifacts\nand lessons learned
note left of TI : Includes CISA responders,\nindustry, external entities

' Styling
skinparam usecase {
  BackgroundColor lightblue
  BorderColor darkblue
}
skinparam actor {
  BackgroundColor lightyellow
  BorderColor darkred
}
skinparam rectangle {
  BackgroundColor lightgray
  BorderColor black
}

@enduml


@startuml
!theme plain
title Persistent Hunt System - Activity Diagram

|#lightblue|Threat Intelligence|
start
:Threat Intelligence Source identifies\nnew adversary TTP;
:Report new threat to system;

|#lightgreen|Tier 3 Analyst|
:Analyze threat intelligence;
:Create detection analytics\nin Elastic/Databricks;
:Deploy analytics to\nmonitoring systems;

|#lightyellow|Automated Systems|
:Monitor network, endpoints,\nand other telemetry;
note right: Continuous automated process
:Run detection analytics\non visibility data;

if (Threat detected?) then (yes)
  :Generate detection alert;
  :Send alert to SIEM dashboard;
  :Aggregate with similar alerts;
  :Auto-triage events;
  
  if (Critical threshold exceeded?) then (yes)
    :Create critical ticket\nin ServiceNow;
    note right: Automated ticket creation
  else (no)
    :Add to investigation queue;
  endif
  
  |#lightcoral|Tier 1 Analyst|
  :Receive alert notification;
  :Investigate event in Elastic;
  :Pivot across datasets;
  :Compile relevant data links;
  :Update ServiceNow ticket;
  
  if (Requires deeper analysis?) then (yes)
    :Assign ticket to Tier 2;
    
    |#lightpink|Tier 2 Analyst|
    :Receive ticket notification;
    :Access full records in Databricks;
    :Develop analysis notebooks\nand queries;
    :Perform deep investigation;
    
    if (Significant findings?) then (yes)
      fork
        :Assign to Production Staff;
        |#lightsteelblue|Production Staff|
        :Review investigation findings;
        :Develop intelligence product;
        :Create automated template\nin ServiceNow;
        :Generate collateral using\nLLM and templates;
        :Stage product for release;
        :Coordinate with internal\nand external partners;
        :Finalize and release product;
        :Close production workflow;
      fork again
        :Assign to Tier 3 for\nanalytic enhancement;
        |#lightgreen|Tier 3 Analyst|
        :Review investigation data;
        :Develop additional\ndetection models;
        :Deploy new analytics\nto platforms;
        :Test and validate\nnew detections;
      end fork
    endif
    
    :Archive analysis artifacts\nto Knowledge Base;
    :Catalog lessons learned;
    :Close investigation ticket;
    
  else (no)
    |#lightcoral|Tier 1 Analyst|
    :Close investigation;
    :Update ticket status;
  endif
  
else (no)
  :Continue monitoring;
endif

|#lightyellow|System Maintenance|
:Update Knowledge Base\nwith new artifacts;
:Maintain detection\nanalytics library;

stop

' Styling
skinparam activity {
  BackgroundColor white
  BorderColor black
  FontSize 11
}

skinparam note {
  BackgroundColor lightyellow
  BorderColor orange
}

' Color coding for different actors
skinparam partition {
  BorderColor black
  FontSize 12
}

@enduml

@startuml
' !theme plain
title Persistent Hunt System - Class Diagram

' Core Domain Classes
class ThreatIntelligence {
  - id: String
  - source: String
  - threatType: ThreatType
  - ttp: String
  - description: String
  - severity: SeverityLevel
  - discoveredDate: Date
  - reportedBy: String
  - indicators: List<Indicator>
  + validate(): Boolean
  + categorize(): ThreatCategory
  + extractIndicators(): List<Indicator>
}

class DetectionAnalytic {
  - id: String
  - name: String
  - description: String
  - query: String
  - platform: Platform
  - threatIntelligenceId: String
  - createdBy: String
  - createdDate: Date
  - lastModified: Date
  - isActive: Boolean
  - accuracy: Double
  + deploy(): Boolean
  + test(): TestResult
  + updateQuery(newQuery: String): void
  + deactivate(): void
}

class Alert {
  - id: String
  - analyticId: String
  - timestamp: Date
  - severity: SeverityLevel
  - status: AlertStatus
  - assignedTo: String
  - description: String
  - rawData: String
  - falsePositive: Boolean
  - indicators: List<Indicator>
  + triage(): TriageResult
  + escalate(): void
  + resolve(): void
  + markFalsePositive(): void
}

class Investigation {
  - id: String
  - caseId: String
  - alertIds: List<String>
  - assignedAnalyst: String
  - tier: AnalystTier
  - startDate: Date
  - endDate: Date
  - status: InvestigationStatus
  - findings: String
  - recommendations: String
  - artifacts: List<Artifact>
  + assignToTier(tier: AnalystTier): void
  + addFindings(findings: String): void
  + generateReport(): Report
  + close(): void
}

class Case {
  - id: String
  - title: String
  - description: String
  - priority: Priority
  - status: CaseStatus
  - createdBy: String
  - createdDate: Date
  - lastUpdated: Date
  - investigations: List<Investigation>
  - tickets: List<Ticket>
  + createTicket(): Ticket
  + updateStatus(status: CaseStatus): void
  + assignInvestigation(investigation: Investigation): void
  + calculateRisk(): RiskLevel
}

class Ticket {
  - id: String
  - caseId: String
  - title: String
  - description: String
  - priority: Priority
  - status: TicketStatus
  - assignedTo: String
  - createdBy: String
  - createdDate: Date
  - dueDate: Date
  - notes: List<Note>
  + assign(analyst: String): void
  + addNote(note: Note): void
  + updateStatus(status: TicketStatus): void
  + close(): void
}

class IntelligenceProduct {
  - id: String
  - title: String
  - type: ProductType
  - content: String
  - author: String
  - createdDate: Date
  - publishedDate: Date
  - classification: Classification
  - tags: List<String>
  - sources: List<String>
  + draft(): void
  + review(): ReviewResult
  + publish(): void
  + generateCollateral(): List<Collateral>
}

class Artifact {
  - id: String
  - name: String
  - type: ArtifactType
  - filePath: String
  - description: String
  - createdBy: String
  - createdDate: Date
  - tags: List<String>
  - metadata: Map<String, String>
  + store(): Boolean
  + retrieve(): Object
  + archive(): void
  + addMetadata(key: String, value: String): void
}

' User Classes
abstract class User {
  - id: String
  - username: String
  - email: String
  - role: Role
  - isActive: Boolean
  - lastLogin: Date
  + authenticate(): Boolean
  + hasPermission(permission: Permission): Boolean
  + getAssignedCases(): List<Case>
}

class Analyst extends User {
  - tier: AnalystTier
  - specializations: List<String>
  - casesHandled: Integer
  - averageResolutionTime: Duration
  + investigate(alert: Alert): Investigation
  + escalateCase(caseId: String): void
  + createAnalytic(): DetectionAnalytic
}

class ProductionStaff extends User {
  - department: String
  - clearanceLevel: String
  + developProduct(investigation: Investigation): IntelligenceProduct
  + reviewProduct(product: IntelligenceProduct): ReviewResult
  + coordinateResponse(): void
}

' System Integration Classes
class ElasticPlatform {
  - endpoint: String
  - apiKey: String
  - indices: List<String>
  + executeQuery(query: String): QueryResult
  + storeData(data: Object): Boolean
  + createIndex(name: String): void
  + deployAnalytic(analytic: DetectionAnalytic): Boolean
}

class DatabricksPlatform {
  - workspace: String
  - cluster: String
  - notebooks: List<String>
  + runNotebook(notebook: String): NotebookResult
  + createModel(data: Dataset): MLModel
  + deployModel(model: MLModel): Boolean
  + queryData(sql: String): DataFrame
}

class ServiceNowSystem {
  - instanceUrl: String
  - credentials: Credentials
  + createTicket(ticket: Ticket): String
  + updateTicket(ticketId: String, updates: Map): void
  + getTicket(ticketId: String): Ticket
  + triggerWorkflow(workflowId: String): void
}

class KnowledgeBase {
  - storageLocation: String
  - indexService: String
  + storeArtifact(artifact: Artifact): Boolean
  + searchArtifacts(query: String): List<Artifact>
  + retrieveArtifact(id: String): Artifact
  + archiveArtifact(id: String): void
}

' Enumeration Classes
enum ThreatType {
  MALWARE
  PHISHING
  APT
  INSIDER_THREAT
  VULNERABILITY
  BOTNET
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  FALSE_POSITIVE
}

enum AnalystTier {
  TIER_1
  TIER_2
  TIER_3
}

enum InvestigationStatus {
  OPEN
  IN_PROGRESS
  PENDING_REVIEW
  CLOSED
  ESCALATED
}

enum Platform {
  ELASTIC
  DATABRICKS
  HYBRID
}

enum ProductType {
  THREAT_REPORT
  ADVISORY
  BULLETIN
  ALERT
  BRIEFING
}

' Relationships
ThreatIntelligence ||--o{ DetectionAnalytic : "triggers creation"
DetectionAnalytic ||--o{ Alert : "generates"
Alert ||--o{ Investigation : "initiates"
Investigation }o--|| Case : "belongs to"
Case ||--o{ Ticket : "creates"
Investigation ||--o{ Artifact : "produces"
Investigation }o--|| IntelligenceProduct : "informs"
Artifact }o--|| KnowledgeBase : "stored in"

User ||--o{ Case : "assigned to"
User ||--o{ Investigation : "performs"
User ||--o{ Ticket : "handles"

ElasticPlatform ||--o{ DetectionAnalytic : "executes"
DatabricksPlatform ||--o{ DetectionAnalytic : "executes"
ServiceNowSystem ||--o{ Ticket : "manages"
ServiceNowSystem ||--o{ Case : "tracks"

' Composition relationships
Case *-- Investigation
Investigation *-- Artifact
Ticket *-- Note
IntelligenceProduct *-- Collateral

' Aggregation relationships
Alert o-- Indicator
ThreatIntelligence o-- Indicator

' Notes
note top of ThreatIntelligence : Represents initial threat\ninformation from various sources
note top of DetectionAnalytic : Contains logic for\nidentifying threats
note top of Investigation : Tracks analysis workflow\nacross different tiers
note right of KnowledgeBase : Integrates with AWS S3\nfor artifact storage

' Styling
skinparam class {
  BackgroundColor lightblue
  BorderColor darkblue
  ArrowColor darkblue
}
skinparam enum {
  BackgroundColor lightyellow
  BorderColor darkred
}

@enduml

@startuml
!theme plain
title Persistent Hunt System - Simplified Component Diagram

' External actors
actor "Analysts" as Analysts
actor "Threat Intelligence" as TI
actor "Production Staff" as Prod

' External systems
database "Elastic/Databricks" as Analytics_Platform
cloud "ServiceNow" as Workflow_Platform
cloud "AWS S3" as Storage_Platform

' Define key interfaces
interface "Web UI" as UI
interface "Analytics API" as Analytics_API
interface "Workflow API" as Workflow_API
interface "Storage API" as Storage_API

' System boundary
package "Persistent Hunt System" {
  
  ' Presentation Layer
  component "User Interface" as Frontend {
    portin "Dashboard"
    portin "Investigation Console"
    portin "Analytics Workbench"
  }
  
  ' Core Services
  component "Threat Detection Service" as Detection {
    portout "Alert Generation"
    portin "Analytics Management"
    portin "Threat Intelligence"
  }
  
  component "Investigation Service" as Investigation {
    portin "Alert Processing"
    portout "Case Management"
    portin "Data Analysis"
  }
  
  component "Intelligence Service" as Intelligence {
    portin "Analysis Results"
    portout "Product Generation"
    portin "Knowledge Management"
  }
  
  component "Workflow Engine" as Workflow {
    portin "Case Coordination"
    portout "Task Assignment"
    portout "Notifications"
  }
  
  ' Data Layer
  component "Data Integration Hub" as DataHub {
    portin "External Data"
    portout "Unified Data Access"
    portin "Artifact Storage"
  }
  
  ' Internal storage
  database "System Database" as SystemDB
}

' External connections
Analysts --> UI
TI --> Detection : "Threat Intelligence"
Prod --> UI

' External system connections
Analytics_Platform <--> Analytics_API
Workflow_Platform <--> Workflow_API
Storage_Platform <--> Storage_API

' Interface connections
UI --> Frontend
Analytics_API --> Detection
Workflow_API --> Workflow
Storage_API --> DataHub

' Component interactions (key flows only)
Frontend --> Detection : "Create Analytics"
Frontend --> Investigation : "Investigate Alerts"
Frontend --> Intelligence : "Develop Products"

Detection --> Investigation : "Alerts"
Investigation --> Intelligence : "Analysis"
Investigation --> Workflow : "Cases"
Intelligence --> Workflow : "Products"

Detection --> DataHub : "Store Detections"
Investigation --> DataHub : "Query Data"
Intelligence --> DataHub : "Archive Knowledge"
Workflow --> DataHub : "Track Activities"

DataHub --> SystemDB : "Persist Data"

' Notes for key components
note right of Detection : • Creates detection analytics\n• Monitors for threats\n• Correlates alerts
note right of Investigation : • Multi-tier analysis workflow\n• Evidence collection\n• Case progression
note right of Intelligence : • Product development\n• Knowledge capture\n• Content generation
note bottom of DataHub : • Integrates external platforms\n• Manages artifacts\n• Provides unified data access

' Styling
skinparam component {
  BackgroundColor lightblue
  BorderColor darkblue
}
skinparam interface {
  BackgroundColor lightyellow
  BorderColor orange
}
skinparam database {
  BackgroundColor lightgreen
  BorderColor darkgreen
}
skinparam cloud {
  BackgroundColor lightgray
  BorderColor darkgray
}
skinparam package {
  BackgroundColor white
  BorderColor black
  FontStyle bold
}

@enduml

@startuml
'!theme plain
title Persistent Hunt System - Simplified Deployment Diagram

' Define security zones
package "DMZ" {
  node "Load Balancer" as LB {
    artifact "HAProxy + SSL" as HAProxy
  }
}

package "Internal Network" {
  
  ' Core Analytics Platform
  node "Analytics Platform" as Analytics <<cluster>> {
    artifact "Elastic Stack" as Elastic
    artifact "Databricks" as Databricks
    database "Analytics Data" as AnalyticsDB
  }
  
  ' Workflow & Knowledge Management
  node "Management Platform" as Management <<cluster>> {
    artifact "ServiceNow" as ServiceNow
    artifact "Knowledge Base" as KB
    database "Operational Data" as OpDB
  }
  
  ' High-availability database cluster
  node "Database Cluster" as DBCluster <<cluster>> {
    database "Primary DB" as PrimaryDB
    database "Replica DB" as ReplicaDB
  }
}

' External systems
cloud "AWS Cloud" as AWS {
  database "S3 Storage" as S3 <<archive>>
}

node "External Sources" as External <<external>> {
  artifact "Threat Intelligence" as TI
  artifact "Network Data" as NetworkData
}

' User access
actor "Analysts" as Users <<multiple>>

' Simplified connections with clear data flow
External --> LB : threat data\n& network logs
Users --> LB : HTTPS/443
LB --> Analytics : analysis requests
LB --> Management : workflow access

Analytics <--> Management : alerts & coordination
Analytics <--> DBCluster : data storage
Management <--> DBCluster : operational data
Management --> S3 : artifact archival
Analytics --> S3 : data backup

' Critical notes
note right of Analytics : Auto-scaling cluster\n• Elastic (detection)\n• Databricks (ML analytics)
note right of Management : Workflow orchestration\n• ServiceNow (tickets)\n• Knowledge Base (artifacts)
note right of S3 : Long-term storage\n• Multi-region backup\n• Compliance archival
note bottom of External : Rate-limited feeds\n• TI sources\n• Network sensors

' Styling for visual hierarchy
skinparam package {
  BackgroundColor lightcyan
  BorderColor darkblue
  FontSize 14
}

skinparam node {
  BackgroundColor lightblue
  BorderColor darkblue
  FontSize 12
}

skinparam artifact {
  BackgroundColor lightyellow
  BorderColor orange
  FontSize 10
}

skinparam database {
  BackgroundColor lightgreen
  BorderColor darkgreen
  FontSize 10
}

skinparam cloud {
  BackgroundColor lightgray
  BorderColor gray
  FontSize 12
}

skinparam actor {
  BackgroundColor pink
  BorderColor red
  FontSize 12
}

@enduml

@startuml
'!theme plain
title Persistent Hunt System - Information Engineering Diagram (ERD)

' Define entities with attributes
entity "ThreatIntelligence" as TI {
  * id : VARCHAR(50) <<PK>>
  --
  * source : VARCHAR(100)
  * threatType : ENUM
  * ttp : TEXT
  * description : TEXT
  * severity : ENUM
  * discoveredDate : TIMESTAMP
  * reportedBy : VARCHAR(100)
  createdDate : TIMESTAMP
  lastModified : TIMESTAMP
}

entity "DetectionAnalytic" as DA {
  * id : VARCHAR(50) <<PK>>
  --
  * name : VARCHAR(200)
  * description : TEXT
  * query : TEXT
  * platform : ENUM
  * createdBy : VARCHAR(100)
  * createdDate : TIMESTAMP
  * lastModified : TIMESTAMP
  * isActive : BOOLEAN
  accuracy : DECIMAL(5,2)
  threatIntelligenceId : VARCHAR(50) <<FK>>
}

entity "Alert" as AL {
  * id : VARCHAR(50) <<PK>>
  --
  * timestamp : TIMESTAMP
  * severity : ENUM
  * status : ENUM
  * description : TEXT
  * rawData : TEXT
  assignedTo : VARCHAR(100)
  falsePositive : BOOLEAN
  analyticId : VARCHAR(50) <<FK>>
}

entity "Investigation" as INV {
  * id : VARCHAR(50) <<PK>>
  --
  * startDate : TIMESTAMP
  * assignedAnalyst : VARCHAR(100)
  * tier : ENUM
  * status : ENUM
  endDate : TIMESTAMP
  findings : TEXT
  recommendations : TEXT
  caseId : VARCHAR(50) <<FK>>
}

entity "Case" as CS {
  * id : VARCHAR(50) <<PK>>
  --
  * title : VARCHAR(200)
  * description : TEXT
  * priority : ENUM
  * status : ENUM
  * createdBy : VARCHAR(100)
  * createdDate : TIMESTAMP
  * lastUpdated : TIMESTAMP
  riskLevel : ENUM
}

entity "Ticket" as TK {
  * id : VARCHAR(50) <<PK>>
  --
  * title : VARCHAR(200)
  * description : TEXT
  * priority : ENUM
  * status : ENUM
  * createdBy : VARCHAR(100)
  * createdDate : TIMESTAMP
  assignedTo : VARCHAR(100)
  dueDate : TIMESTAMP
  caseId : VARCHAR(50) <<FK>>
}

entity "IntelligenceProduct" as IP {
  * id : VARCHAR(50) <<PK>>
  --
  * title : VARCHAR(200)
  * type : ENUM
  * content : TEXT
  * author : VARCHAR(100)
  * createdDate : TIMESTAMP
  publishedDate : TIMESTAMP
  classification : ENUM
}

entity "Artifact" as AR {
  * id : VARCHAR(50) <<PK>>
  --
  * name : VARCHAR(200)
  * type : ENUM
  * filePath : VARCHAR(500)
  * description : TEXT
  * createdBy : VARCHAR(100)
  * createdDate : TIMESTAMP
  investigationId : VARCHAR(50) <<FK>>
}

entity "User" as US {
  * id : VARCHAR(50) <<PK>>
  --
  * username : VARCHAR(100)
  * email : VARCHAR(150)
  * role : ENUM
  * isActive : BOOLEAN
  * lastLogin : TIMESTAMP
  tier : ENUM
  department : VARCHAR(100)
  clearanceLevel : VARCHAR(50)
}

entity "Indicator" as IND {
  * id : VARCHAR(50) <<PK>>
  --
  * type : ENUM
  * value : VARCHAR(500)
  * description : TEXT
  * confidence : DECIMAL(3,2)
  * createdDate : TIMESTAMP
}

entity "Note" as NT {
  * id : VARCHAR(50) <<PK>>
  --
  * content : TEXT
  * createdBy : VARCHAR(100)
  * createdDate : TIMESTAMP
  ticketId : VARCHAR(50) <<FK>>
}

entity "Tag" as TG {
  * id : VARCHAR(50) <<PK>>
  --
  * name : VARCHAR(100)
  * category : VARCHAR(50)
  * description : TEXT
}

entity "Platform" as PL {
  * id : VARCHAR(50) <<PK>>
  --
  * name : VARCHAR(100)
  * type : ENUM
  * endpoint : VARCHAR(200)
  * configuration : TEXT
  * isActive : BOOLEAN
}

entity "QueryResult" as QR {
  * id : VARCHAR(50) <<PK>>
  --
  * queryText : TEXT
  * resultData : TEXT
  * executionTime : INTEGER
  * timestamp : TIMESTAMP
  * recordCount : INTEGER
  platformId : VARCHAR(50) <<FK>>
}

' Junction/Association entities for many-to-many relationships
entity "AlertIndicator" as AI {
  * alertId : VARCHAR(50) <<PK,FK>>
  * indicatorId : VARCHAR(50) <<PK,FK>>
  --
  relevanceScore : DECIMAL(3,2)
  createdDate : TIMESTAMP
}

entity "ThreatIntelligenceIndicator" as TII {
  * threatIntelligenceId : VARCHAR(50) <<PK,FK>>
  * indicatorId : VARCHAR(50) <<PK,FK>>
  --
  confidence : DECIMAL(3,2)
  createdDate : TIMESTAMP
}

entity "InvestigationAlert" as IA {
  * investigationId : VARCHAR(50) <<PK,FK>>
  * alertId : VARCHAR(50) <<PK,FK>>
  --
  analysisNotes : TEXT
  createdDate : TIMESTAMP
}

entity "ProductSource" as PS {
  * productId : VARCHAR(50) <<PK,FK>>
  * sourceId : VARCHAR(50) <<PK,FK>>
  --
  sourceType : ENUM
  createdDate : TIMESTAMP
}

entity "ArtifactTag" as AT {
  * artifactId : VARCHAR(50) <<PK,FK>>
  * tagId : VARCHAR(50) <<PK,FK>>
  --
  createdDate : TIMESTAMP
}

entity "ProductTag" as PT {
  * productId : VARCHAR(50) <<PK,FK>>
  * tagId : VARCHAR(50) <<PK,FK>>
  --
  createdDate : TIMESTAMP
}

' Define relationships
TI ||--o{ DA : "triggers creation"
DA ||--o{ AL : "generates"
AL ||--o{ IA : "analyzed in"
IA }o--|| INV : "part of"
INV }o--|| CS : "belongs to"
CS ||--o{ TK : "tracks"
INV ||--o{ AR : "produces"
INV }o--|| IP : "informs"
US ||--o{ CS : "assigned to"
US ||--o{ INV : "performs"
US ||--o{ TK : "handles"
TK ||--o{ NT : "contains"
PL ||--o{ QR : "executes"
PL ||--o{ DA : "runs on"

' Many-to-many relationships through junction entities
AL ||--o{ AI : ""
AI }o--|| IND : ""
TI ||--o{ TII : ""
TII }o--|| IND : ""
IP ||--o{ PS : ""
PS }o--|| TI : ""
AR ||--o{ AT : ""
AT }o--|| TG : ""
IP ||--o{ PT : ""
PT }o--|| TG : ""

' Additional relationships
US ||--o{ DA : "creates"
US ||--o{ IP : "authors"
US ||--o{ AR : "creates"
US ||--o{ NT : "writes"

' Cardinality and participation constraints
note right of TI : External threat intelligence\nfrom various sources
note right of DA : Detection rules deployed\non analytics platforms
note right of AL : Generated alerts from\nautomated detection
note right of INV : Analysis workflow across\ndifferent analyst tiers
note right of CS : Case management for\ntracking investigations
note right of IP : Final intelligence products\nfor dissemination
note right of AR : Analysis artifacts stored\nin knowledge base
note right of US : System users with\nrole-based access

' Styling
skinparam entity {
  BackgroundColor lightblue
  BorderColor darkblue
  FontSize 10
}

skinparam enum {
  BackgroundColor lightyellow
  BorderColor orange
}

@enduml

@startuml
'!theme plain
title Persistent Hunt System - Sequence Diagram

' Define participants
participant "Threat Intelligence\nSource" as TI
participant "Tier 3 Analyst" as T3
participant "Elastic Platform" as Elastic
participant "Databricks Platform" as Databricks
participant "SIEM Dashboard" as SIEM
participant "ServiceNow" as SN
participant "Tier 1 Analyst" as T1
participant "Tier 2 Analyst" as T2
participant "Production Staff" as Prod
participant "Knowledge Base" as KB

' Activation boxes
activate TI
activate T3
activate Elastic
activate Databricks

== Threat Identification & Detection Creation ==
TI -> T3 : Report new adversary TTP
note right : New threat intelligence\nfrom multiple sources
T3 -> T3 : Analyze threat patterns
T3 -> Elastic : Create detection analytic
T3 -> Databricks : Create detection analytic
note right : Analytics created based\non observed behaviors

== Continuous Monitoring & Detection ==
loop Continuous Monitoring
    Elastic -> Elastic : Run automated detection\non visibility data
    Databricks -> Databricks : Run automated detection\non visibility data
    
    alt Detection Triggered
        Elastic -> SIEM : Send detection alert
        Databricks -> SIEM : Send detection alert
        SIEM -> SIEM : Aggregate & triage alerts
        
        alt Critical Threshold Met
            SIEM -> SN : Auto-create critical ticket
            activate SN
            SN -> T1 : Notify of critical alert
        else Normal Alert
            SIEM -> T1 : Display in dashboard
        end
    end
end

== Tier 1 Investigation ==
activate T1
T1 -> SN : Create/Update ticket
T1 -> Elastic : Investigate event details
T1 -> Elastic : Pivot across datasets
T1 -> SN : Document findings in ticket

alt Requires Escalation
    T1 -> SN : Assign ticket to Tier 2
    T1 -> T2 : Notify of escalation
    deactivate T1
else Investigation Complete
    T1 -> SN : Close ticket
    deactivate T1
end

== Tier 2 Deep Analysis ==
activate T2
T2 -> SN : Receive ticket notification
T2 -> Databricks : Access full records
T2 -> Databricks : Develop analysis notebooks
T2 -> Elastic : Create investigation queries
T2 -> SN : Update ticket with analysis

alt Requires Production Response
    T2 -> SN : Assign to Production Staff
    T2 -> Prod : Notify for product development
    
    == Intelligence Product Development ==
    activate Prod
    Prod -> SN : Review ticket details
    Prod -> SN : Create product workflow
    Prod -> SN : Generate automated template
    Prod -> SN : Develop intelligence product
    Prod -> SN : Stage product for release
    Prod -> SN : Coordinate response activities
    Prod -> SN : Close production workflow
    deactivate Prod
    
else Requires Enhanced Detection
    T2 -> SN : Assign to Tier 3
    T2 -> T3 : Notify for detection enhancement
    
    == Detection Enhancement ==
    T3 -> SN : Receive enhancement request
    T3 -> Databricks : Develop additional models
    T3 -> Elastic : Deploy new analytics
    T3 -> SN : Update ticket status
    T3 -> KB : Archive analysis artifacts
    T3 -> SN : Close ticket
    
else Investigation Complete
    T2 -> SN : Close ticket
end

== Knowledge Management ==
T2 -> KB : Archive analysis artifacts
T2 -> SN : Close ticket
deactivate T2

== System Cleanup ==
SN -> SN : Update case workflow status
deactivate SN

' Notes
note over TI, KB : This sequence represents one complete cycle\nof the Persistent Hunt workflow
note over Elastic, Databricks : Continuous monitoring runs\nindependently of investigations
note over T1, T2 : Analysts can escalate or close\nbased on investigation findings

' Styling
skinparam participant {
    BackgroundColor lightblue
    BorderColor darkblue
}
skinparam note {
    BackgroundColor lightyellow
    BorderColor orange
}

@enduml

@startuml
'!theme plain
title Persistent Hunt System - Threat Detection Case State Diagram

' Define states
state "Initial" as Initial
state "Threat Identified" as ThreatID
state "Analytics Created" as AnalyticsCreated
state "Monitoring Active" as MonitoringActive
state "Alert Generated" as AlertGenerated
state "Triaged" as Triaged
state "Under Investigation (T1)" as InvestigationT1
state "Escalated to T2" as EscalatedT2
state "Deep Analysis" as DeepAnalysis
state "Escalated to T3" as EscalatedT3
state "Escalated to Production" as EscalatedProd
state "Enhanced Analytics" as EnhancedAnalytics
state "Product Development" as ProductDev
state "Response Coordinated" as ResponseCoordinated
state "Knowledge Archived" as KnowledgeArchived
state "Case Closed" as CaseClosed

' Composite states for parallel processes
state "Active Monitoring" as ActiveMonitoring {
  state "Continuous Detection" as ContinuousDetection
  state "Alert Processing" as AlertProcessing
  ContinuousDetection --> AlertProcessing : alert_triggered
  AlertProcessing --> ContinuousDetection : alert_processed
}

state "Investigation Process" as InvestigationProcess {
  state "Initial Assessment" as InitialAssessment
  state "Evidence Collection" as EvidenceCollection
  state "Analysis & Correlation" as AnalysisCorrelation
  
  InitialAssessment --> EvidenceCollection : evidence_found
  EvidenceCollection --> AnalysisCorrelation : data_collected
  AnalysisCorrelation --> InitialAssessment : need_more_data
}

' Initial transitions
[*] --> Initial

' Main workflow transitions
Initial --> ThreatID : threat_reported[by TI source]
ThreatID --> AnalyticsCreated : analytic_created[by T3]
AnalyticsCreated --> MonitoringActive : analytic_deployed
MonitoringActive --> ActiveMonitoring : monitoring_started

' Alert processing
ActiveMonitoring --> AlertGenerated : detection_triggered
AlertGenerated --> Triaged : alert_triaged[by system]

' Investigation paths
Triaged --> InvestigationT1 : assigned_to_T1
Triaged --> CaseClosed : false_positive[closed by T1]

' T1 Investigation outcomes
InvestigationT1 --> InvestigationProcess : investigation_started
InvestigationProcess --> EscalatedT2 : escalate_to_T2[T1 decision]
InvestigationProcess --> CaseClosed : resolved[T1 closes]

' T2 Deep Analysis outcomes
EscalatedT2 --> DeepAnalysis : T2_assigned
DeepAnalysis --> EscalatedT3 : needs_enhancement[assign to T3]
DeepAnalysis --> EscalatedProd : needs_product[assign to Production]
DeepAnalysis --> KnowledgeArchived : analysis_complete[T2 closes]

' T3 Analytics Enhancement
EscalatedT3 --> EnhancedAnalytics : T3_working
EnhancedAnalytics --> MonitoringActive : new_analytic_deployed
EnhancedAnalytics --> KnowledgeArchived : enhancement_complete

' Production workflow
EscalatedProd --> ProductDev : production_assigned
ProductDev --> ResponseCoordinated : product_developed
ResponseCoordinated --> KnowledgeArchived : response_complete

' Knowledge archival and closure
KnowledgeArchived --> CaseClosed : artifacts_archived
CaseClosed --> [*]

' Critical event handling (parallel path)
Triaged --> ResponseCoordinated : critical_threshold_exceeded
ResponseCoordinated --> ProductDev : immediate_product_needed

' Self-transitions for continuous processes
MonitoringActive : entry / start_detection
MonitoringActive : do / continuous_monitoring
MonitoringActive : exit / log_monitoring_status

AlertGenerated : entry / create_alert
AlertGenerated : do / aggregate_similar_alerts
AlertGenerated : exit / forward_to_dashboard

DeepAnalysis : entry / access_full_datasets
DeepAnalysis : do / develop_queries_and_notebooks
DeepAnalysis : exit / document_findings

' Guard conditions and actions
note right of Triaged : Guard: [priority_level]\nActions: create_serviceNow_ticket
note right of EscalatedT2 : Guard: [requires_deep_analysis]\nActions: assign_T2_analyst
note right of EscalatedT3 : Guard: [needs_new_detection]\nActions: assign_T3_analyst
note right of EscalatedProd : Guard: [requires_product]\nActions: assign_production_staff
note right of ResponseCoordinated : Guard: [critical_threshold]\nActions: auto_create_ticket

' Styling
skinparam state {
  BackgroundColor lightblue
  BorderColor darkblue
  FontColor black
}

skinparam state {
  BackgroundColor<<composite>> lightgreen
  BorderColor<<composite>> darkgreen
}

@enduml